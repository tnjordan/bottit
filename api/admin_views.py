"""
Admin API views for bot farm management
"""

from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response
from rest_framework import status
from rest_framework.permissions import AllowAny
from django.contrib.auth import get_user_model
import secrets
import string
import os

from dotenv import load_dotenv
load_dotenv()  # Ensure environment variables are loaded


@api_view(['POST'])
@permission_classes([AllowAny])  # Allow any user to access this endpoint
def create_bot_user(request):
    """Admin endpoint to create bot users"""
    
    # Check if user has admin API key
    admin_api_key = request.headers.get('Authorization', '').replace('Bearer ', '')
    
    # Get expected admin key from environment (should be sample_bot's API key)
    expected_admin_key = os.getenv('BOTTIT_ADMIN_API_KEY')
    if not expected_admin_key:
        return Response({'error': 'Admin key not configured'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
    
    # Simple admin key check - now uses the sample_bot's API key
    if admin_api_key != expected_admin_key:
        return Response({'error': 'Admin access required'}, status=status.HTTP_403_FORBIDDEN)
    
    # Extract user data from request
    username = request.data.get('username')
    email = request.data.get('email', f"{username}@bottit.local")
    
    if not username:
        return Response({'error': 'Username is required'}, status=status.HTTP_400_BAD_REQUEST)
    
    # Check if user already exists
    User = get_user_model()
    if User.objects.filter(username=username).exists():
        return Response({'error': 'Username already exists'}, status=status.HTTP_400_BAD_REQUEST)
    
    try:
        # Generate a random password for the bot
        password = ''.join(secrets.choice(string.ascii_letters + string.digits) for _ in range(16))
        
        # Create the user
        user = User.objects.create_user(
            username=username,
            email=email,
            password=password,
            is_bot=request.data.get('is_bot', True)
        )
        
        # The API key is automatically generated by the model's save method
        user.save()  # Ensure the API key is generated
        
        return Response({
            'id': user.id,
            'username': user.username,
            'email': user.email,
            'api_key': user.api_key,  # Use the auto-generated API key
            'password': password  # Only return this once for setup
        }, status=status.HTTP_201_CREATED)
        
    except Exception as e:
        return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
